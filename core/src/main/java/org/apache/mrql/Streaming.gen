/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.mrql;

import org.apache.mrql.gen.*;


/** Generate a physical plan from an algebraic expression */
final public class Streaming extends AlgebraicOptimization {

    static boolean is_streaming ( Tree e ) {
        match e {
        case call(stream,...): return true;
        case `f(...al):
            for ( Tree a: al )
                if (is_streaming(a))
                    return true;
        };
        return false;
    }

    static Trees stream_bindings ( Tree e ) {
        match e {
        case call(stream,...):
            return #[bind(`(new_var()),`e)];
        case `f(...al):
            Trees rs = #[];
            for ( Tree a: al )
                rs = rs.append(stream_bindings(a));
            return rs;
        };
        return #[];
    }

    static Tree streamify ( Tree e ) {
        Trees sbs = stream_bindings(e);
        Tree ne = e;
        for ( Tree sb: sbs )
            match sb {
            case bind(`v,`u):
                ne = #<stream(lambda(`v,`(subst(u,v,ne))),`u)>;
                TypeInference.type_inference(ne);
            };
        return ne;
    }
}
